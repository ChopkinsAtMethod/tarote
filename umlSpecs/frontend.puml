@startuml
title "Full Tarot Reading System: Domain, AI/RAG, and UI Rendering"

' ------------------- DOMAIN LAYER -------------------

class Card {
  - name: string
  - description: string
  ' orientation & position assigned only when drawn
}

class Deck {
  - name: string
  - description: string
  - cards: List<Card>
}

class SpreadLayout {
  - type: string
  - positions: List<string>
}

interface ISpread {
  + draw(deck: Deck): Spread
}

class TarotSpread implements ISpread {
  - layout: SpreadLayout
  + draw(deck: Deck): Spread
}

class Spread {
  - layout: SpreadLayout
  - cards: List<DrawnCard>
  ' (DrawnCard = Card + assigned orientation/position)
}

' ------------------- AI & RAG LAYER -------------------

interface IReadingService {
  + fetchReading(finalPrompt: string): string
}

class LocalOllamaReadingService {
  - localEndpoint: string
  + fetchReading(finalPrompt: string): string
}

class RemoteChatbotReadingService {
  - apiEndpoint: string
  - apiKey: string
  + fetchReading(finalPrompt: string): string
}

class InBrowserLLMReadingService {
  - wasmModel: object
  + fetchReading(finalPrompt: string): string
}

class ReadingServiceFactory {
  + createReadingService(type: string): IReadingService
}

interface IRAGService {
  + retrieveContext(userIntention: string): List<String>
}

class RAGServiceImpl {
  + retrieveContext(userIntention: string): List<String>
}

class PromptEngineeringService {
  - toneStyler: ToneStyler
  - ragService: IRAGService
  + buildPrompt(userIntention: string, spread: Spread): string
}

class ToneStyler {
  + applyTone(baseText: string, toneType: string): string
}

class AIReaderController {
  - readingService: IReadingService
  - promptEngineering: PromptEngineeringService
  + setReadingService(service: IReadingService): void
  + fetchReading(userIntention: string, spread: Spread, toneType: string): string
}

' ------------------- UI & RENDERING LAYER -------------------

interface ISpreadRenderer {
  + renderSpread(spread: Spread): RenderedSpread
}

class CelticCrossRenderer implements ISpreadRenderer {
  + renderSpread(spread: Spread): RenderedSpread
}

class PastPresentFutureRenderer implements ISpreadRenderer {
  + renderSpread(spread: Spread): RenderedSpread
}

class CardPlacement <<datatype>> {
  layoutPosition: string
  x: number
  y: number
  z?: number
  rotation?: number
}

class RenderedSpread <<datatype>> {
  ' This can be an array of CardPlacement or a ReactElement tree
}

class TarotDisplay {
  + showSpread(spread: Spread): void
  + showReading(reading: string): void
}

class UserInput {
  + captureIntention(): string
  + validateInput(input: string): boolean
}

class ShareFeature {
  + shareToSocialMedia(platform: string, reading: string): void
}

class TarotApp {
  + initialize(): void
  + run(): void
}

' ------------------- RELATIONSHIPS -------------------

' Domain
ISpread <|.. TarotSpread
TarotSpread --> SpreadLayout : "uses"
TarotSpread --> Spread : "produces/draws"
Spread --> Card : "composed of"
Deck --> Card : "contains"

' AI & RAG
IReadingService <|.. LocalOllamaReadingService
IReadingService <|.. RemoteChatbotReadingService
IReadingService <|.. InBrowserLLMReadingService
ReadingServiceFactory --> IReadingService : "creates"

IRAGService <|.. RAGServiceImpl
PromptEngineeringService --> IRAGService : "retrieves context"
PromptEngineeringService --> ToneStyler : "applies comedic style"
AIReaderController --> IReadingService : "strategy"
AIReaderController --> PromptEngineeringService : "builds final prompt"

' UI & Rendering
ISpreadRenderer <|.. CelticCrossRenderer
ISpreadRenderer <|.. PastPresentFutureRenderer
ISpreadRenderer --> RenderedSpread : "produces"
RenderedSpread --> CardPlacement : "consists of"
TarotDisplay --> ISpreadRenderer : "invokes"
TarotDisplay --> Spread : "displays domain object"
TarotDisplay --> AIReaderController : "optionally uses to fetch reading"
UserInput --> TarotApp
ShareFeature --> TarotApp
TarotApp --> Deck
TarotApp --> Spread

@enduml